// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ping.proto

package ping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pinger_ServerStream_FullMethodName = "/ping.Pinger/ServerStream"
	Pinger_ClientStream_FullMethodName = "/ping.Pinger/ClientStream"
	Pinger_BidiStream_FullMethodName   = "/ping.Pinger/BidiStream"
)

// PingerClient is the client API for Pinger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingerClient interface {
	// Sends a greeting
	ServerStream(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (Pinger_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Pinger_ClientStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (Pinger_BidiStreamClient, error)
}

type pingerClient struct {
	cc grpc.ClientConnInterface
}

func NewPingerClient(cc grpc.ClientConnInterface) PingerClient {
	return &pingerClient{cc}
}

func (c *pingerClient) ServerStream(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (Pinger_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pinger_ServiceDesc.Streams[0], Pinger_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pinger_ServerStreamClient interface {
	Recv() (*PingReply, error)
	grpc.ClientStream
}

type pingerServerStreamClient struct {
	grpc.ClientStream
}

func (x *pingerServerStreamClient) Recv() (*PingReply, error) {
	m := new(PingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingerClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Pinger_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pinger_ServiceDesc.Streams[1], Pinger_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerClientStreamClient{stream}
	return x, nil
}

type Pinger_ClientStreamClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PingReply, error)
	grpc.ClientStream
}

type pingerClientStreamClient struct {
	grpc.ClientStream
}

func (x *pingerClientStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingerClientStreamClient) CloseAndRecv() (*PingReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingerClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (Pinger_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pinger_ServiceDesc.Streams[2], Pinger_BidiStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerBidiStreamClient{stream}
	return x, nil
}

type Pinger_BidiStreamClient interface {
	Send(*PingRequest) error
	Recv() (*PingReply, error)
	grpc.ClientStream
}

type pingerBidiStreamClient struct {
	grpc.ClientStream
}

func (x *pingerBidiStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingerBidiStreamClient) Recv() (*PingReply, error) {
	m := new(PingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingerServer is the server API for Pinger service.
// All implementations must embed UnimplementedPingerServer
// for forward compatibility
type PingerServer interface {
	// Sends a greeting
	ServerStream(*PingRequest, Pinger_ServerStreamServer) error
	ClientStream(Pinger_ClientStreamServer) error
	BidiStream(Pinger_BidiStreamServer) error
	mustEmbedUnimplementedPingerServer()
}

// UnimplementedPingerServer must be embedded to have forward compatible implementations.
type UnimplementedPingerServer struct {
}

func (UnimplementedPingerServer) ServerStream(*PingRequest, Pinger_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedPingerServer) ClientStream(Pinger_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedPingerServer) BidiStream(Pinger_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedPingerServer) mustEmbedUnimplementedPingerServer() {}

// UnsafePingerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingerServer will
// result in compilation errors.
type UnsafePingerServer interface {
	mustEmbedUnimplementedPingerServer()
}

func RegisterPingerServer(s grpc.ServiceRegistrar, srv PingerServer) {
	s.RegisterService(&Pinger_ServiceDesc, srv)
}

func _Pinger_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingerServer).ServerStream(m, &pingerServerStreamServer{stream})
}

type Pinger_ServerStreamServer interface {
	Send(*PingReply) error
	grpc.ServerStream
}

type pingerServerStreamServer struct {
	grpc.ServerStream
}

func (x *pingerServerStreamServer) Send(m *PingReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Pinger_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingerServer).ClientStream(&pingerClientStreamServer{stream})
}

type Pinger_ClientStreamServer interface {
	SendAndClose(*PingReply) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingerClientStreamServer struct {
	grpc.ServerStream
}

func (x *pingerClientStreamServer) SendAndClose(m *PingReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingerClientStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pinger_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingerServer).BidiStream(&pingerBidiStreamServer{stream})
}

type Pinger_BidiStreamServer interface {
	Send(*PingReply) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingerBidiStreamServer struct {
	grpc.ServerStream
}

func (x *pingerBidiStreamServer) Send(m *PingReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingerBidiStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Pinger_ServiceDesc is the grpc.ServiceDesc for Pinger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pinger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ping.Pinger",
	HandlerType: (*PingerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Pinger_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Pinger_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _Pinger_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ping.proto",
}
