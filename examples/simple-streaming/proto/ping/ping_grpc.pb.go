// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ping.proto

package ping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pinger_Ping_FullMethodName = "/ping.Pinger/Ping"
)

// PingerClient is the client API for Pinger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingerClient interface {
	// Sends a greeting
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (Pinger_PingClient, error)
}

type pingerClient struct {
	cc grpc.ClientConnInterface
}

func NewPingerClient(cc grpc.ClientConnInterface) PingerClient {
	return &pingerClient{cc}
}

func (c *pingerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (Pinger_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pinger_ServiceDesc.Streams[0], Pinger_Ping_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pinger_PingClient interface {
	Recv() (*PingReply, error)
	grpc.ClientStream
}

type pingerPingClient struct {
	grpc.ClientStream
}

func (x *pingerPingClient) Recv() (*PingReply, error) {
	m := new(PingReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingerServer is the server API for Pinger service.
// All implementations must embed UnimplementedPingerServer
// for forward compatibility
type PingerServer interface {
	// Sends a greeting
	Ping(*PingRequest, Pinger_PingServer) error
	mustEmbedUnimplementedPingerServer()
}

// UnimplementedPingerServer must be embedded to have forward compatible implementations.
type UnimplementedPingerServer struct {
}

func (UnimplementedPingerServer) Ping(*PingRequest, Pinger_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPingerServer) mustEmbedUnimplementedPingerServer() {}

// UnsafePingerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingerServer will
// result in compilation errors.
type UnsafePingerServer interface {
	mustEmbedUnimplementedPingerServer()
}

func RegisterPingerServer(s grpc.ServiceRegistrar, srv PingerServer) {
	s.RegisterService(&Pinger_ServiceDesc, srv)
}

func _Pinger_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingerServer).Ping(m, &pingerPingServer{stream})
}

type Pinger_PingServer interface {
	Send(*PingReply) error
	grpc.ServerStream
}

type pingerPingServer struct {
	grpc.ServerStream
}

func (x *pingerPingServer) Send(m *PingReply) error {
	return x.ServerStream.SendMsg(m)
}

// Pinger_ServiceDesc is the grpc.ServiceDesc for Pinger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pinger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ping.Pinger",
	HandlerType: (*PingerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Pinger_Ping_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ping.proto",
}
